---
title: | 
  Writing functions in R
subtitle: |
  Palaeoverse workshop 2023
  
  ![](images/logo.png){fig-align="center" height=150}
author: | 
  [Kilian Eichenseer](mailto:kilian.eichenseer@durham.ac.uk), Durham University
  
affiliation: "Durham University"
execute:
  echo: true
  eval: true
format: 
  revealjs:
    logo: "images/logo.png"
    theme: default
    embed-resources: true
    output-file: "index.html"
    fontsize: 24pt
---

# Function basics

## What is a function

takes input --\> does something --\> returns output

::: fragment
```{r}
mean(c(1, 2, 3))
```
:::

<br>

::: fragment
A function needs a [name]{style="color: cornflowerblue;"}, [arguments]{style="color: green;"} in (), and a [body]{style="color: darkorange;"} in {}

```{=html}
<pre><code>
<span class="func-name">subtract</span> <- function(<span class="func-args">arg1, arg2</span>) { <span class="func-body">
  arg1 - arg2 </span>
} 
</code></pre>
```
:::

```{r, echo = FALSE}
subtract <- function(arg1, arg2) {
  arg1 - arg2
}
```

<br>

::: fragment
```{r}
subtract(2, 1)
```
:::

## Why do we need functions

::: columns
::: {.column width="50%"}
-   Readability
-   Organisation
:::

::: {.column width="50%"}
-   Modularity
-   Reusability
:::
:::

::: fragment
Imagine calculating the mean without standard functions like `mean` or `sum`:
:::

::: fragment
```{r}
  data <- c(1,2,3)
  total <- 0
  count <- 0
  for (value in data) {
    total <- total + value
    count <- count + 1
  }
  total/count

```
:::

## Arguments

Arguments need to be provided in the correct order, or specified by name: <br>

::: fragment
```{r}
subtract(2, 1)
```
:::

<br>

::: fragment
```{r}
subtract(1, 2)
```
:::

<br>

::: fragment
```{r}
subtract(arg2 = 1, arg1 = 2)
```
:::

## Default values

Make function use more convenient, can hide complexities.

::: fragment
```{r, error=TRUE}
subtract(2)
```
:::

<br>

::: fragment
This will work if we set a default for `arg2`:

```{r}
subtract <- function(arg1, arg2 = 1) {
  arg1 - arg2
}
```
:::

<br>

::: fragment
```{r}
subtract(2)
```
:::

<br>

## Ellipsis ('...')

Additional, optional arguments can be allowed by using '...' as the last argument:

::: fragment
```{r}
my_plot <- function(arg1, arg2, ...) {
  plot(arg1, arg2, ...)
}
```
:::

<br>

::: fragment
```{r, eval=FALSE}
my_plot(2, 1, col = "red", pch = 17, cex = 2)
```

```{r, echo = FALSE}
#| out-width: 29%
#| fig-width: 2.5
#| fig-height: 2.5
#| fig-align: left
par(mar=c(4,4,0.2,0.2), mgp = c(2.25,.9,0))
my_plot(2, 1, col = "red", pch = 17, cex = 2)

```
:::

## Return

A function generally should return something, but this does not:

::: fragment
```{r}
subtract <- function(arg1, arg2) {
  result <- arg1 - arg2
}
```
:::

::: fragment
```{r}
subtract(2,1)
```
:::

<br>

::: fragment
Return explicitly with `return`, or place return value at the end of the function:

```{r}
subtract <- function(arg1, arg2) {
  result <- arg1 - arg2
  return(result)
}
```
:::

::: fragment
```{r}
subtract(2,1)
```
:::

<br>

## Return multiple objects

::: fragment
```{r}
just_return <- function(arg1, arg2) {
return(arg1)
return(arg2)
}
```
:::

::: fragment
```{r}
just_return(2, 1)
```

This did not work as intended. R functions only return one object. Instead use lists or other data structures:
:::

::: fragment
```{r}
just_return <- function(arg1, arg2) {
return(c(arg1, arg2))
}
```
:::

::: fragment
```{r}
just_return(2, 1)
```
:::

## Binary operators

::: columns
::: {.column width="50%"}
::: fragment
Standard function syntax:

```{r}
sum(c(1,2))
```
:::
:::

::: {.column width="50%"}
::: fragment
Operator syntax:

```{r}
1 + 2
```
:::
:::
:::

::: columns
::: {.column width="50%"}
::: fragment
Most binary operators come in `%`:
:::
:::

::: {.column width="50%"}
::: fragment
```{r}
3 %in% c(1,2,3)
```
:::
:::
:::

<br>

::: fragment
Custom binary operators -- let's define an operator for "not in":

```{r}
`%!in%` <- function(x, y) !(x %in% y)
```
:::

::: fragment
```{r}
3 %!in% c(1,2,3)
```
:::

## Control structures -- if

`if` a condition is true, do something.

::: fragment
```{r}
if (1 + 1 == 2) print("True")
```
:::

<br>

::: fragment
```{r}
add_or_subtract <- function(arg1, arg2, operation) {
 if (operation == "add") {
   result <- arg1 + arg2
 }
 if (operation == "subtract") {
   result <- arg1 + arg2
 }
 result
}
```
:::

::: fragment
```{r}
add_or_subtract(2,1,"add")
```
:::

## Control structures -- else

`else` instructs what to do when the `if` condition is not met.

::: fragment
```{r}
if (1 + 1 == 3) print("True") else print("False")
```
:::

<br>

::: fragment
```{r}
add_or_subtract <- function(arg1, arg2, operation) {
 if (operation == "add") {
   result <- arg1 + arg2
 } else {
   result <- arg1 - arg2
 }
 return(result)
}
```
:::

::: fragment
```{r}
add_or_subtract(2,1,"subtract")
```
:::

## Control structures -- switch

Instead of many `if` and `else` statements, try `switch`

::: fragment
```{r}
fossil_description <- function(fossil) {
 switch(fossil,
  ammonite = "coiled shell",
  Tyrannosaurus = "serrated teeth",
  Lepidodendron = "scaly bark",	
  "not a fossil"
 )
}
```
:::

::: fragment
```{r}
fossil_description("Tyrannosaurus")
```
:::

::: fragment
```{r}
fossil_description("Lewis")
```
:::

## Control structures -- for loops

Loops are used for repeating similar actions multiple times. `for` loops iterate over a set of values. The iterator (`i`) changes with every iteration of the loop:

::: fragment
```{r}
for(i in c(1,2,3)) print(i)
```
:::

::: fragment
To generate sequences of integers, we can use `seq_len`. Let's make a function:

```{r}
print_repetitions <- function(n) {
 for (i in seq_len(n)) { 
   print(i)
 }
}
```
:::

::: fragment
```{r}
print_repetitions(2)
```
:::

## Control structures -- while loops

`while` loops repeat a task until a condition is no longer met.

::: fragment
```{r}
add_until_4 <- function(x) {
  while(x < 4) {
    x <- x + 1
    print(x)
  }
}
```
:::

::: fragment
```{r}
add_until_4(1)
```
:::

## Exercise 1 - Function for latitudinal binning

::: columns
::: {.column width="70%"}
Create a function that can sort a data.frame into latitudinal bins. That is, we want a new column that identifies the bin of each entry of the data set. As an exemplary data set, we can use the `reefs` data from `palaeoverse`.
:::

::: {.column width="30%"}
![](images/earth.png){fig.align="center" height="140pt"}
:::
:::

::: {style="background-color: #212F3C; color: #FFFFFF; padding: 15px;"}
If you are new to writing R functions, try a simpler function that can sort data into the northern and southern hemisphere.
:::

::: {style="margin-top: 0.75em;"}
:::

Here is what the result may look like when sorted into hemispheres:

```{r, echo=FALSE}
library(palaeoverse)
reefs$hemisphere <- ifelse(reefs$lat>=0, "north", "south")
```

```{r}
reefs[72:73, c("name", "lat", "hemisphere")]
```

## Exercise 1 - My solution

# Best practices

## Naming style

Give variables and functions consistent names. These are the two most common styles:

::: {style="margin-top: 0.75em;"}
:::

::: columns
::: {.column width="50%"}
snake_case

::: {style="width: 300pt; height: 200pt; display: flex; align-items: center; justify-content: center; background-color: white;"}
<img src="images/snake.jpg"/>
:::

used by [Tidyverse's style guide](https://style.tidyverse.org/index.html)
:::

::: {.column width="50%"}
CamelCase

::: {style="width: 300pt; height: 200pt; display: flex; align-items: center; justify-content: center; background-color: white;"}
<img src="images/camel.png" style="max-height: 300pt; max-width: 200pt;"/>
:::

used by [Google's R style guide](https://google.github.io/styleguide/Rguide.html)
:::
:::

::: fragment
Internal functions in R packages are often prefixed with a dot, e.g. `.my_internal_function`. Don't prefix the file name with a dot.
:::

## Clean coding

Common practices:

::: fragment
-   Avoid renaming existing functions and variables

```{r}
mean <- mean(c(1, 2, 3))
mean
```
:::

::: fragment
```{r}
mean(c(1, 2, 3))
```

R is clever, in this case this still works.
:::

::: {style="margin-top: 0.25em;"}
:::

::: fragment
-   Use `<-` for assignment, not `=`

```{r}
data = c(1, 2, 3)
data <- c(1, 2, 3)
```
:::

::: {style="margin-top: 0.25em;"}
:::

::: fragment
Example of a detailed style guide: [Tidyverse's style guide](https://style.tidyverse.org/index.html)
:::

## lintr

The `lintr` package let's you check that your code conforms to your chosen standard.

::: {style="margin-top: 1em;"}
:::

::: fragment
Here, we choose the tidyverse style:

```{r eval=FALSE}
install.packages("lintr")
lintr::use_lintr(type = "tidyverse")
```
:::

::: {style="margin-top: 1em;"}
:::

::: fragment
And now we check for style violations in our project directory:

```{r eval=FALSE}
lintr::lint_dir()
```

![](images/lintr.png){fig.align="center" height="120pt"}
:::

## Comments

-   document purpose and usage of code
-   explain complex / non-intuitive code

::: fragment
```{r, eval=FALSE}
# Calculate convex hull
tmp <- tmp[chull(x = tmp[, lng], 
                 y = tmp[, lat]), c(lng, lat)]
```
:::

::: fragment
-   organise code into sections

```{r, eval=FALSE}
#=== Set-up ===
  unique_taxa <- unique(occdf[, name])
  # Order taxa
  unique_taxa <- unique_taxa[order(unique_taxa)]
#=== convex hull  ===
```
:::

::: fragment
Good code shouldn't need a large amount of comments - but comment enough that you can still use your code two years later.
:::

## Comments

Add some general information in the beginning of a large R script.

```{r, eval = FALSE}
### Change point regression analysis
### July 2021
### Kilian Eichenseer
###
### Bayesian algorithm for finding a change point in 
### the linear relationship between two variables. 
### Uses JAGS (https://mcmc-jags.sourceforge.io/).

### Generate data
set.seed(10) 
n <- 60 # total number of data points
```

::: fragment
Even better: add formal documentation.
:::

## Documentation

```{r, eval = FALSE}
?mean
```

![](images/meanhelp.png)

## roxygen2

-   R package, install with `install.packages("roxygen2")`
-   Used to create documentation for R packages (functions, data, ...)
-   Start every line of documentation with `’#`

::: fragment
This could generate documentation for the `subtract` function from earlier:

```{r eval = FALSE}
#' Subtraction
#' 
#' Subtracts `arg2` from `arg1`
#'
#' @param arg1 `Numeric`. First argument.
#' @param arg2 `Numeric`. Second argument.
#' @return A `numeric` containing the difference 
#' between `arg1` and `arg2`.
#' @examples
#' subtract(2,1)
```
:::

## ?subtract

![](images/subtraction.png) \## roxygen2

Commonly used roxygen2 tags are:

-   @param for function parameters
-   @return for the function output
-   @details for additional
-   @example provide examples of the function
-   @seealso reference related functions or external resources

For more details, see https://r-pkgs.org/man.html

## Exercise 2 - Document your function

::: columns
::: {.column width="70%"}
-   Make sure your code follows the same style throughout
-   Add in-line comments if necessary
-   Create documentation with `roxygen2`
:::

::: {.column width="30%"}
![](images/earth.png){fig.align="center" height="140pt"}
:::
:::

## Exercise 2 - Create a package

From RStudio, create a New Directory (`File -> New Project...`)

![](images/roxygensetup1.png){fig.align="center" height="400pt"}

## Exercise 2 - Create a package

![](images/roxygensetup2.png){fig.align="center"}

## Exercise 2 - Create a package

::: columns
::: {.column width="40%"}
-   Save functions in the `R` folder as .R files
-   Documentation will be automatically created in the `man` folder
-   You may need to delete the `NAMESPACE` file once to avoid warnings
:::

::: {.column width="60%"}
![](images/roxygensetup3.png){fig.align="center"}
:::
:::

## Exercise 2 - use roxygen2

We start by installing `roxygen2` and loading it:

```{r eval = FALSE}
install.packages("roxygen2")
library("roxygen2")
```

::: {style="margin-top: 0.5em;"}
:::

To generate a documentation template for your function, click on `Code --> Insert Roxygen Skeleton` in Rstudio.

::: {style="margin-top: 0.5em;"}
:::

To generate documentation from our roxygen2 comments, which are denoted by the `#'` tags, run

```{r eval = FALSE}
roxygenise()
```

or press `Ctrl + Shift + D`.

::: {style="margin-top: 1.25em;"}
:::

We can now read the documentation of our function by calling

```{r eval = FALSE}
?my_function # use the name of your documented function
```

## Exercise 2 - My solution

# Testing and Debugging

## Error handling

Very helpful in complex functions

::: fragment
```{r}
subtract(2, 1)
```
:::

::: fragment
```{r, error=TRUE}
subtract("2", 1)
```
:::

::: {style="margin-top: 0.25em;"}
:::

::: fragment
Check that input is correct and display custom error messages:

```{r}
subtract <- function(arg1, arg2) {
  if (is.numeric(arg1) == FALSE) {
    stop("`arg1` must be numeric") 
    }
  arg1 - arg2
}
```
:::

::: fragment
```{r, error=TRUE}
subtract("2", 1)
```
:::

## tryCatch

Use if you anticipate an error but want function to continue.

::: {style="margin-top: 0.5em;"}
:::

::: fragment
Let's try to generate data from a multivariate normal distribution:

```{r, error=TRUE}
mvnfast::rmvn(1, mu = c(0,0), sigma = matrix(rep(1,4), 2))
```
:::

::: {style="margin-top: 0.5em;"}
:::

::: fragment
`mvnfast::rmvn` is fast but fails for some problematic `sigma` values. In case it fails, we use `MASS::mvrnorm` instead:

```{r, error=TRUE}
my_rmvn <- function(n, mu, sigma) {
  tryCatch(mvnfast::rmvn(n, mu, sigma),
           error = function(e) MASS::mvrnorm(n, mu, sigma))
}
```
:::

::: fragment
```{r, error=TRUE}
my_rmvn(n = 1, mu = c(0,0), sigma = matrix(rep(1,4), 2))
```
:::

## Traceback

If something went wrong, find out where using `traceback()`:

::: fragment
```{r,error=TRUE}
my_rmvn(n = 1, mu = 0, sigma = matrix(rep(1,4), 2))
```
:::

::: {style="margin-top: 1em;"}
:::

::: fragment
```{r,eval=FALSE}
traceback()
```

![](images/traceback.png){fig.align="center"}
:::

## Break points

Break points allow you to look inside your function's environment. Click next to a line of code in your function to activate a break point (a [red]{style="color: red;"} dot appears):

::: fragment
![](images/debug1.png){fig.align="center"}
:::

::: fragment
Now run the function...

```{r, eval=FALSE}
my_rmvn(n = 1, mu = c(0,0), sigma = matrix(rep(1,4), 2))
```
:::

::: fragment
You may need to run `devtools::load_all()` first.
:::

## Break points

![](images/debug2.png){fig.align="center"}

## Break points

We can now browse the function environment in the console like we normally can browse the global environment. For example we can look at `sigma`:

![](images/debug3.png){fig.align="center" height="225pt"}

Press `Stop` to end the browsing. Don't forget to deactivate the break point by clicking on the [red]{style="color: red;"} dot in the script.

## Tests

Functions should be tested before they are used.

::: {style="margin-top: 2em;"}
:::

::: fragment
Sometimes, interactive testing may be enough.

For example, `identical()` tests whether two objects are exactly equal:

```{r}
identical(subtract(2,1),
          1)
```
:::

::: {style="margin-top: 2em;"}
:::

::: fragment
Automated testing with the [testthat](https://testthat.r-lib.org/) R package is superior.

<br>

Read more on testing at [r-pkgs.org](https://r-pkgs.org/testing-basics.html).
:::

## testthat

-   Used to create unit tests for R packages that can be run automatically
-   R package, install with `install.packages("testthat")`
-   Set up infrastructure for a test with `usethis::test_name`

::: {style="margin-top: 1em;"}
:::

::: fragment
Create a test file for the `subtract` function:

```{r eval=FALSE}
usethis::use_test("subtract")
```

This has created a `test-subtract.R` file in `package_name/tests/testthat/`
:::

## testthat

In the `test-subtract.R` file, we can write tests, for example:

```{r, eval=FALSE}
test_that("subtraction works", {
  expect_equal(subtract(2,1),
               1)
})
```

::: fragment
If we run this test, we should get [<img src="images/testpassed.png" height="35pt" align="center"/>]{style="display: inline-block;"}
:::

## testthat

We can also run all of our tests at once with `test_local` or `test_package("my_package")`:

```{r, eval=FALSE}
testthat::test_local()
```

![](images/testlocal.png){fig.align="center" height="80pt"}

::: fragment
If you have the `devtools` package installed, you can also use `devtools::test()` by pressing `Test` in the `Build` tab of Rstudio:

![](images/testbutton.png){fig.align="center" height="150pt"}
:::

## testthat

Useful tests include:

::: columns
::: {.column width="50%"}
-   expect_equal
-   expect_true, expect_false
:::

::: {.column width="50%"}
-   expect_error
-   expect_snapshot (for results that are difficult to describe with code)
:::
:::

::: fragment
For testing plot functions, the `expect_doppelganger()` function from the `vdiffr` package can be used:

```{r, eval=FALSE}
test_that("plot function works", {
  plot_1 <- function() plot(1,2)
  vdiffr::expect_doppelganger("plot_1", plot_1)

```

This will create an image in the `tests/testthat/_snaps/function_name` directory. Upon first calling this, inspect the image to see if it is as expected. Future tests will fail if the function call in the test changes the image.
:::

## Test coverage

To check how much of your package is covered by tests, the `covr` package is helpful:

::: fragment
```{r, eval=FALSE}
covr::package_coverage()
```

![](images/packagecoverage.png){fig.align="center" height="50pt"}
:::

::: {style="margin-top: 1em;"}
:::

::: fragment
You may need to unload the package before using the `covr` package, e.g. with

```{r, eval=FALSE}
devtools::unload()
```
:::

## Test coverage

The `report()` function lets you check test coverage line by line:

::: fragment
```{r, eval=FALSE}
covr::report()
```

![](images/report.png){fig.align="center" height="150pt"}
:::

::: fragment
![](images/report2.png){fig.align="center" height="200pt"}
:::

## Exercise 3 - Test your function

::: columns
::: {.column width="70%"}
-   Add tests for your function using `testthat` functionality
-   Add custom error messages to your function, flagging inappropriate input
:::

::: {.column width="30%"}
![](images/earth.png){fig.align="center" height="140pt"}
:::
:::

::: fragment
Setup for testing:

```{r eval=FALSE}
install.packages(testthat)
install.packages(usethis)
usethis::use_test("function_name")
```
:::

::: fragment
The devtools package is also very helpful:

```{r eval=FALSE}
install.packages(devtools)
```
:::

# Advanced tools

## apply

-   `apply` and related functions apply a function to elements of arrays, lists, ...
-   more concise than loops and don't change global environment

::: fragment
For example, to get the class of the first three columns of the `reefs` data:

```{r}
reef_classes <- rep(NA,3)
for (i in 1:3) {
  reef_classes[i] <- class(palaeoverse::reefs[,i])
}
reef_classes
```
:::

::: fragment
Or with apply:

```{r}
apply(palaeoverse::reefs[,1:3], MARGIN = 2, FUN = class)
```
:::

## apply

Let's have a look what happened there. `apply(X, MARGIN, FUN)` takes an array X (our `reefs` dataframe), and applies a function (FUN) to elements of that array, specified by MARGIN.

::: {style="margin-top: 1em;"}
:::

::: fragment
MARGIN = 2 indicates columns, MARGIN = 1 would be rows. So here we applied the `class` function to every column of `reefs`.

![](images/reefsdf.png){fig.align="center" height="200pt"}
:::

::: fragment
`apply` simplifies the output, so here it returned a `vector` with one element for each column.
:::

## lapply

`lapply` is similar to apply but for list or vector input. It returns a list for each element of the data.

::: fragment
```{r}
data <- list(c(1, 2, 3), c(4, 5))
lapply(data, mean)
```
:::

::: {style="margin-top: 0.75em;"}
:::

::: fragment
`sapply` does the same, but also tries to simplify the output; here we get a vector:

```{r}
data <- list(c(1, 2, 3), c(4, 5))
sapply(data, mean)
```
:::

## vapply

`vapply` is a safer version of `sapply`, it requires the user to specify the anticipated class and length of the elements of the output:

::: {style="margin-top: 1.25em;"}
:::

::: fragment
```{r}
data <- list(c(1, 2, 3), c(4, 5))
vapply(data, FUN = mean, FUN.VALUE = numeric(1))
```

::: {style="margin-top: 1em;"}
:::

Here, we specified in FUN.VALUE that each element of the output should be a numeric of length 1.
:::

## Environment

Environment can be conceptualised as a place where objects with a name and value exist.

::: fragment
For example, when we run

```{r}
x <- 1
```

`x` now exists in the global environment, and has the value `1`.
:::

<br>

::: fragment
Each function, `for` loop, ..., creates its own environment.
:::

## Environment

If we run the following function to assign to `b` the value of `a`

```{r}
a_to_b <- function(a) b <- a
a_to_b(a = 1)
```

::: fragment
and then look for `b` in the global environment
:::

::: fragment
```{r, error=TRUE}
b
```

we get an error because `b` only existed within the function environment.
:::

<br>

::: fragment
More on environments: [adv-r.hadley.nz/environments.html](https://adv-r.hadley.nz/environments.html)
:::

## Scoping

R uses scoping rules to look for variables (or functions). If a variable is not found in a function environment, R looks in the parent environment (i.e. the environment in which the function was created).

::: fragment
```{r}
x <- 1
double_x <- function(y) 2 * x + y
double_x(0)
```
:::

::: fragment
`x` is a free variable in the `double_x` function -- it is not supplied to or defined in the function. Instead, it's looked up in the environment where `double_x` was created, the global environment.

::: {style="margin-top: 1em;"}
:::

This can get tricky, see here for more details: [bookdown.org/rdpeng/rprogdatascience/scoping-rules-of-r.html](https://bookdown.org/rdpeng/rprogdatascience/scoping-rules-of-r.html)
:::

## Measuring performance

If you have large data sets and complex functions, you may want to enhance their performance.

<br>

::: fragment
To check how long an operation takes, use system.time:

```{r}
system.time(rnorm(10^6))
```
:::

## Measuring performance

The `microbenchmark` package performs an operation many times, and measures the average time it takes. You can also compare different operations.

<br>

::: fragment
What is faster, `rnorm` or `rlnorm`?

```{r}
microbenchmark::microbenchmark(rnorm(10^4),
                               rlnorm(10^4))

```
:::

## Profiling

The `profvis` package lets you identify bottlenecks in your code:

::: fragment
```{r, eval=FALSE}
short_pause <- function(x) Sys.sleep(0.1 * x)
long_pause <- function(x) Sys.sleep(0.2 * x)

time_waste <- function(x) {
  short_pause(x)
  long_pause(x)
}
```

```{r, eval=FALSE}
profvis::profvis(time_waste(1))

```
:::

::: fragment
![](images/profiling.png)
:::

## Speeding up functions

Only spend time trying to make your code faster if

-   it works as intended
-   you have identified the parts that are slowing it down

<br>

::: fragment
Here is a good overview on making R functions run faster: [Best coding practices in R](https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/speedtips.html)
:::

## Memory allocation

Pre-allocating memory is faster than growing objects repeatedly.

::: fragment
Assume, we have recorded the results of 1,000 dice rolls:

```{r}
data <- sample.int(6, n = 100, replace = TRUE)

```
:::

::: fragment
Now, we want to check which ones show "6". Compare these two approaches:

::: columns
::: {.column width="50%"}
```{r}
is_six_1 <- function(x) {
  res <- NULL
  for(i in seq_along(x)) {
    res[i] <- x[i] == 6
  }
  res
}
```
:::

::: {.column width="50%"}
```{r}
is_six_2  <- function(x) {
  res <- rep(NA,length(x))
  for(i in seq_along(x)) {
    res[i] <- x[i] == 6
  }
  res
}
```
:::
:::
:::

## Memory allocation

Let's check which approach is faster:

```{r}
microbenchmark::microbenchmark(is_six_1(data),
                               is_six_2(data), times = 1000)
```

<br>

::: fragment
`is_six_2()` is faster, as R doesn't have to grow the `res` object in every iteration.
:::

## Vectorisation

R has many functions that are vectorised.
<br>

::: fragment
Instead of running a loop to check each value of our dice rolls, we can check them all at once by taking advantage of the ability of `==` to take vector input:

::: columns
::: {.column width="50%"}
```{r}
is_six_2  <- function(x) {
  res <- rep(NA,length(x))
  for(i in seq_along(x)) {
    res[i] <- x[i] == 6
  }
  res
}
```
:::

::: {.column width="50%"}
```{r}
is_six_3 <- function(x) {
  x == 6
}
```
:::
:::
:::

## Vectorisation

```{r}
microbenchmark::microbenchmark(is_six_2(data), 
                               is_six_3(data), times = 1000)
```
<br>

This time, the second version is much faster.

## Vectorisation

Vectorised matrix functions like `rowSums()`, `colSums()` or `rowMeans()`can lead to impressive speedups:

::: fragment
```{r}
data <- matrix(rnorm(10^4), nrow = 100)

microbenchmark::microbenchmark(
  apply(data, 2, sum),
  colSums(data),
  times = 1000)
```
:::


## Rcpp
The `Rcpp` package allows for writing functions in C++. It requires the installation of a C++ compiler ([R tools](https://cran.r-project.org/bin/windows/Rtools/) for Windows, Xcode for Mac, possibly "sudo apt-get install r-base-dev" on Linux)

<br>

::: fragment
Read more at [Rcpp: Seamless R and C++ Integration](https://dirk.eddelbuettel.com/code/rcpp.html) or[Avanced R](http://adv-r.had.co.nz/Rcpp.html) 
:::

<br>

::: fragment
I also highly recommend [ChatGpt](https://chat.openai.com/) for help with creating C++ functions.
:::

## Rcpp 
As an example, let's compare a random walk implemented in R with one implemented with Rcpp.

::: fragment
First, the R version:
```{r}
random_walk_R <- function(steps) {
  walk <- numeric(steps)
  for (i in 2:steps) {
    walk[i] <- walk[i-1] + ifelse(runif(1) > 0.5, 1, -1)
  }
  return(walk)
}
```
:::


## Rcpp 
Next, the Rcpp version:

```{r, eval=FALSE}
library(Rcpp)
sourceCpp(
'#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
NumericVector random_walk_Rcpp(int steps) {
  NumericVector walk(steps);
  for(int i = 1; i < steps; i++) {
    walk[i] = walk[i-1] + (R::runif(0, 1) > 0.5 ? 1 : -1);
  }
  return walk;
}')

```

::: fragment
We now have the function `random_walk_Rcpp` in the global environment.
:::

## Rcpp 
Let's make sure both versions work:

```{r, eval = FALSE}
plot(random_walk_R(1000), type = "l", ylim = c(-50,50))
points(random_walk_Rcpp(1000),type = "l", col = "red")
```
![](images/randomwalk.png){fig.align="center" height="300pt"}

## Rcpp 

Now let us compare the speed:

```{r, eval = FALSE}
microbenchmark::microbenchmark(
  random_walk_Rcpp(1000),
  random_walk_Rcpp(1000),
  times = 100)
```
![](images/randomwalkmicro.png)

::: fragment

Loops are much faster in C++!

:::

## Exercise 4

::: columns
::: {.column width="70%"}
-   Can you use apply or similar functions to reduce the amount of code?
-   Profile your function. Are there any slow parts?
-   Can you use vectorisation or other tricks to speed it up?
:::

::: {.column width="30%"}
![](images/earth.png){fig.align="center" height="140pt"}
:::
:::
